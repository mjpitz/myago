{{- $dockerEnabled := includes .Features "docker" }}
{{- $legalEnabled := includes .Features "legal" }}
{{- $goEnabled := includes .Features "go" }}
{{- $goreleaserEnabled := includes .Features "goreleaser" }}
{{- $versionEnabled := includes .Features "version" }}
CWD = $(shell pwd)
{{- if $dockerEnabled }}
SKAFFOLD_DEFAULT_REPO ?= ghcr.io/mjpitz
VERSION ?= latest
{{- end }}

define HELP_TEXT
Welcome to {{ .Name }}!

Targets:
  help             provides help text
  test             run tests
  {{- if $dockerEnabled }}
  docker           rebuild the {{ .Name }} docker container
  docker/release   releases {{ .Name }}
  {{- end}}
  {{- if $legalEnabled }}
  legal            prepends legal header to source code
  {{- end }}
  {{- if $goreleaserEnabled }}
  dist             recompiles {{ .Name }} binaries
  {{- end }}

endef
export HELP_TEXT

help:
	@echo "$$HELP_TEXT"

{{- if $dockerEnabled }}
docker: .docker
.docker:
	docker build . \
		--tag $(SKAFFOLD_DEFAULT_REPO)/{{ .Name }}:latest \
		--tag $(SKAFFOLD_DEFAULT_REPO)/{{ .Name }}:$(VERSION) \
		--file ./cmd/{{ .Name }}/Dockerfile

docker/release:
	docker buildx build . \
		--platform linux/amd64,linux/arm64 \
		--label "org.opencontainers.image.source=https://github.com/mjpitz/{{ .Name }}" \
		--label "org.opencontainers.image.version=$(VERSION)" \
		--label "org.opencontainers.image.licenses={{ .License }}" \
		--label "org.opencontainers.image.title={{ .Name }}" \
		--label "org.opencontainers.image.description=" \
		--tag $(SKAFFOLD_DEFAULT_REPO)/{{ .Name }}:latest \
		--tag $(SKAFFOLD_DEFAULT_REPO)/{{ .Name }}:$(VERSION) \
		--file ./cmd/{{ .Name }}/Dockerfile \
		--push
{{- end }}

# actual targets

test:
	{{- if $goEnabled }}
	go test -v -race -coverprofile=.coverprofile -covermode=atomic ./...
	{{- end }}

{{- if $legalEnabled }}
legal: .legal
.legal:
	addlicense -f ./legal/header.txt -skip yaml -skip yml .
{{- end }}

{{- if $goreleaserEnabled }}
dist: .dist
.dist:
	sh ./scripts/dist-go.sh
{{- end }}

{{- if $versionEnabled }}
# useful shortcuts for release

tag/release:
	npm version "$(shell date +%y.%m.0)"
	git push --follow-tags

tag/patch:
	npm version patch
	git push --follow-tags
{{- end }}
